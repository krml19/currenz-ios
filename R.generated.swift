//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `round-swap-horizontal-circle`.
    static let roundSwapHorizontalCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "round-swap-horizontal-circle")
    /// Image `round-swap-vertical-circle`.
    static let roundSwapVerticalCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "round-swap-vertical-circle")
    
    /// `UIImage(named: "round-swap-horizontal-circle", bundle: ..., traitCollection: ...)`
    static func roundSwapHorizontalCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundSwapHorizontalCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "round-swap-vertical-circle", bundle: ..., traitCollection: ...)`
    static func roundSwapVerticalCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundSwapVerticalCircle, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `CurrencyExchange`.
    static let currencyExchange = _R.storyboard.currencyExchange()
    
    /// `UIStoryboard(name: "CurrencyExchange", bundle: ...)`
    static func currencyExchange(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.currencyExchange)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// en translation: Exchange
      /// 
      /// Locales: en
      static let currency_exchange_title = Rswift.StringResource(key: "currency_exchange_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: en
      /// 
      /// Locales: en
      static let loc_lang = Rswift.StringResource(key: "loc_lang", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Exchange
      /// 
      /// Locales: en
      static func currency_exchange_title(_: Void = ()) -> String {
        return NSLocalizedString("currency_exchange_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: en
      /// 
      /// Locales: en
      static func loc_lang(_: Void = ()) -> String {
        return NSLocalizedString("loc_lang", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try currencyExchange.validate()
    }
    
    struct currencyExchange: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CurrencyExchangeNavigationController
      
      let bundle = R.hostingBundle
      let currencyExchangeViewController = StoryboardViewControllerResource<CurrencyExchangeViewController>(identifier: "CurrencyExchangeViewController")
      let name = "CurrencyExchange"
      
      func currencyExchangeViewController(_: Void = ()) -> CurrencyExchangeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currencyExchangeViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.currencyExchange().currencyExchangeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currencyExchangeViewController' could not be loaded from storyboard 'CurrencyExchange' as 'CurrencyExchangeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
